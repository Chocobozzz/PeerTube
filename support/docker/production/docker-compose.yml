version: "3.3"

services:

  peertube:
    build:
      context: .
      dockerfile: ./Dockerfile.stretch
    image: chocobozzz/peertube:production-stretch
    environment:
      PEERTUBE_HOSTNAME: ${PEERTUBE_HOSTNAME}
      PEERTUBE_PORT: ${PEERTUBE_PORT}
      PEERTUBE_HTTPS: ${PEERTUBE_HTTPS}
      PEERTUBE_ADMIN_EMAIL: ${PEERTUBE_ADMIN_EMAIL}
      PEERTUBE_DB_HOSTNAME: ${DB_HOSTNAME}
      PEERTUBE_DB_USERNAME: ${DB_USERNAME}
      PEERTUBE_DB_PASSWORD: ${DB_PASSWORD}
      PEERTUBE_SIGNUP_ENABLED: ${PEERTUBE_SIGNUP_ENABLED}
      PEERTUBE_TRANSCODING_ENABLED: ${PEERTUBE_TRANSCODING_ENABLED}
      PEERTUBE_REDIS_HOSTNAME: ${PEERTUBE_REDIS_HOSTNAME}
      PEERTUBE_SMTP_HOSTNAME: ${PEERTUBE_SMTP_HOSTNAME}
      PEERTUBE_SMTP_PORT: ${PEERTUBE_SMTP_PORT}
      PEERTUBE_SMTP_FROM: ${PEERTUBE_SMTP_FROM}
      PEERTUBE_SMTP_TLS: ${PEERTUBE_SMTP_TLS}
    # Traefik labels are suggested as an example for people using Traefik,
    # remove them if you are using another reverse proxy.
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: "Host:${PEERTUBE_HOSTNAME}"
      traefik.port: "9000"
    # If you don't want to use a reverse proxy (not suitable for production!)
    # ports:
      # - "80:9000"
    volumes:
      - ./data:/data
    depends_on:
      - postgres
      - redis
    restart: "always"

  postgres:
    image: postgres:10-alpine
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: peertube
    volumes:
      - ./db:/var/lib/postgresql/data
    restart: "always"

  redis:
    image: redis:4-alpine
    volumes:
      - ./redis:/data
    restart: "always"
